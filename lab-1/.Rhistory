a = c(1,23,4)
a
length(a)
numeric(length(a))
seq(length(a))
c(length(a))
# 1.2
knearest=function(data, k, newdata) {
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
X=as.matrix(data[,-p])
Xn=as.matrix(newdata[-p])
X=X/matrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y = as.metrix(data[, -p])
Y = Y / matrix(sqrt(rowSums(Y^2)), nrow=n1, ncol=p-1)
Y_tran = t(Y)
C = X %*% Y_tran
distance = 1 - C
for (index in 1:n2 ) {
distance_ordered = order(distance[, index], decreasing = FALSE)
chosen_order = distance_ordered[1:k]
Prob[index] = sum(data[chosen_order, p]) / k
}
return(Prob)
}
# Anton MO Eriksson
# anter491
# 2017-11-16
require(readxl)
library(readxl)
setwd("/home/ame/git/tdde01/TDDE01/lab-1")
set.seed(12345)
# 1.1 Import data.
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
k = 5
train_prob = knearest(train, k, train)
importData=function(fileName="spambase.csv"){
mailData <- read.csv(fileName)
n <- dim(mailData)
set.seed(12345)
id <- sample(1:n[1], floor(n * 0.5))
train <- mailData[id,]
test <- mailData[-id,]
train_prob = knearest(train, k, train)
train_prob = knearest(train, k, train)
trainY = train_prob > 0.5
trainY
print(trainY)
)
importData=function(fileName="spambase.csv"){
mailData <- read.csv(fileName)
n <- dim(mailData)
set.seed(12345)
id <- sample(1:n[1], floor(n * 0.5))
train <- mailData[id,]
test <- mailData[-id,]
print("Done import data.")
}
# Anton MO Eriksson
# anter491
# 2017-11-16
require(readxl)
library(readxl)
setwd("/home/ame/git/tdde01/TDDE01/lab-1")
set.seed(12345)
# 1.1 Import data.
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
# 1.2
knearest=function(data, k, newdata) {
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
X=as.matrix(data[,-p])
Xn=as.matrix(newdata[-p])
X=X/matrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y = as.metrix(data[, -p])
Y = Y / matrix(sqrt(rowSums(Y^2)), nrow=n1, ncol=p-1)
Y_tran = t(Y)
C = X %*% Y_tran
distance = 1 - C
for (index in 1:n2 ) {
distance_ordered = order(distance[, index], decreasing = FALSE)
chosen_order = distance_ordered[1:k]
Prob[index] = sum(data[chosen_order, p]) / k
}
return(Prob)
}
train_prob = knearest(train, k, train)
X=as.matrix(data[,-p])
Xn=as.matrix(newdata[-p])
X=as.matrix(input_data[,-p])
p=dim(data)[2]
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
swag = read.csv("spamebase.csv")
setwd("/home/ame/git/tdde01/TDDE01/lab-1")
swag = read.csv("spamebase.csv")
swag = read.csv("spambase.csv")
swag
swag == input_data
a = swag == input_data
a
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
train = input_data[id, ]
train
test
train
test
id
p
knearest(train, k, train)
??as
??as.matrix
as.matrix()
as.matrix(swag)
all(swag, input_data)
swag ==input_data
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
train = swag[id, ]
knearest(train, k, train)
as.metrix(swag[1])
as.metrix()
as.matrix
??as.matrix
as.matrix
as.matrix()
help as.matrix
??*
??smaple
??sample
knearest=function(data, k, newdata) {
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
X=as.metrix(data[,-p])
Xn=as.metrix(newdata[-p])
X=X/metrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y = as.metrix(data[, -p])
Y = Y / matrix(sqrt(rowSums(Y^2)), nrow=n1, ncol=p-1)
Y_tran = t(Y)
C = X %*% Y_tran
distance = 1 - C
for (index in 1:n2 ) {
distance_ordered = order(distance[, index], decreasing = FALSE)
chosen_order = distance_ordered[1:k]
Prob[index] = sum(data[chosen_order, p]) / k
}
return(Prob)
}
knearest(train, k, train)
knearest=function(data, k, newdata) {
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
X = as.matrix(data[,-p])
Xn = as.matrix(newdata[-p])
X = X / matrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y = as.matrix(data[, -p])
Y = Y / matrix(sqrt(rowSums(Y^2)), nrow=n1, ncol=p-1)
Y_tran = t(Y)
C = X %*% Y_tran
distance = 1 - C
for (index in 1:n2 ) {
distance_ordered = order(distance[, index], decreasing = FALSE)
chosen_order = distance_ordered[1:k]
Prob[index] = sum(data[chosen_order, p]) / k
}
return(Prob)
}
knearest(train, k, train)
classify_mail <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[, p])
}
classify_mail <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[, p])
print(table_trained)
}
training <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[, p])
print(table_trained)
}
training(train, train, 5)
training(swag, swag, 5)
p=dim(data)[2]
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
n1=dim(input_data)[1]
p=dim(input_data)[2]
Prob=numeric(n2)
training(swag, swag, 5)
training(input_data, input_data, 5)
accuracy = sum(diag(table_trained)) / sum(table_trained)
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[,p])
print(table_trained)
accuracy = sum(diag(table_trained)) / sum(table_trained)
training(input_data, input_data, 5)
training(input_data, input_data, 5)
training <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[,p])
#print(table_trained)
accuracy = sum(diag(table_trained)) / sum(table_trained)
print(1 - accuracy)
}
training(input_data, input_data, 5)
training <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[,p])
print(table_trained)
accuracy = sum(diag(table_trained)) / sum(table_trained)
print(1 - accuracy)
}
training(input_data, input_data, 5)
training(input_data, input_data, 1)
training(swag, swag, 1)
knearest=function(data, k, newdata) {
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
X = as.matrix(data[,-p])
X = X / matrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y = as.matrix(newdata[, -p])
Y = Y / matrix(sqrt(rowSums(Y^2)), nrow=n1, ncol=p-1)
Y_tran = t(Y)
C = X %*% Y_tran
distance = 1 - C
for (index in 1:n2 ) {
distance_ordered = order(distance[, index], decreasing = FALSE)
chosen_order = distance_ordered[1:k]
Prob[index] = sum(data[chosen_order, p]) / k
}
return(Prob)
}
training(input_data, input_data, 1)
training(input_data, input_data, 5)
knearest=function(data, k, newdata) {
n1=dim(data)[1]
n2=dim(newdata)[1]
p=dim(data)[2]
Prob=numeric(n2)
X = as.matrix(data[,-p])
X = X / matrix(sqrt(rowSums(X^2)), nrow=n1, ncol=p-1)
Y = as.matrix(newdata[, -p])
Y = Y / matrix(sqrt(rowSums(Y^2)), nrow=n2, ncol=p-1)
Y_tran = t(Y)
C = X %*% Y_tran
distance = 1 - C
for (index in 1:n2 ) {
distance_ordered = order(distance[, index], decreasing = FALSE)
chosen_order = distance_ordered[1:k]
Prob[index] = sum(data[chosen_order, p]) / k
}
return(Prob)
}
training(input_data, input_data, 5)
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
input_data <- data.matrix(read_excel("spambase.xlsx"))
n = dim(input_data)[1]
set.seed(12345)
id = sample(1:n, floor(n * 0.5))
train = input_data[id, ]
test = input_data[-id, ]
training <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, training_data[,p])
print(table_trained)
accuracy = sum(diag(table_trained)) / sum(table_trained)
print(1 - accuracy)
}
training(train, train, 5)
training(train, test, 5)
training(test, train, 5)
training(train, train, 1)
training <- function(training_data, test_data, threshold) {
train_probebility = knearest(training_data, threshold, test_data)
Y_train = train_probebility > 0.5
table_trained = table(Y_train, test_data[,p])
print(table_trained)
accuracy = sum(diag(table_trained)) / sum(table_trained)
print(1 - accuracy)
}
training(train, train, 1)
training(train, test, 5)
require(kknn)
library(kknn)
library(kknn)
install.packages("kknn")
library(kknn)
install.packages("kknn", dependencies = FALSE)
install.packages('kknn')
require(kknn)
install.packages("~/Downloads/kknn_1.3.1.tar.gz", repos = NULL, type = "source")
library(kknn)
install.packages("~/Downloads/kknn_1.3.1.tar.gz", repos = NULL, type = "source")
install.packages("igraph", dependencies = FALSE)
