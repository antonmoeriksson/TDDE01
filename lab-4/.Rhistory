colnames(validation)
colnames(email_data[,58])
colnames(email_data[,55])
names(email_data[,55])
names(email_data)[58]
names(new_email_data)[58] = names(email_data)[58]
n = dim(new_email_data)[1]
id = sample(1:n, floor(n * 0.5))
train = new_email_data[id, ]
validation = new_email_data[-id, ]
colnames(validation)
min(validation$type)
validation[, 58]
as.numeric(validation[, 58])
validation[, 58] = as.numeric(validation[, 58])
max(validation$type)
min(validation$type)
scaled_prediction = prediction$net.result *
(max(validation$type) - min(validation$type) + min(validation$type))
actual = validation$type *
(max(validation$type) - min(validation$type) + min(validation$type))
max(validation$type)
min(validation$type)
min(validation$type)
sum((compute(nn, traning$type)$net.result - traning$type) ^ 2) / nrow(traning)
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  c(10,10,10), threshold = threshold )
mse_validation[i] = sum((compute(nn, validation$type)$net.result - validation$type) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, traning$type)$net.result - traning$type) ^ 2) / nrow(traning)
}
validation$type
validation$type
compute(nn, validation$type)$net.result
plot(nn)
View(email_data)
View(email_data)
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  c(1), threshold = threshold )
mse_validation[i] = sum((compute(nn, validation$type)$net.result - validation$type) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, traning$type)$net.result - traning$type) ^ 2) / nrow(traning)
}
sum((compute(nn, validation$type)$net.result - validation$type) ^ 2) / nrow(validation)
validation$type
compute(nn, validation$type)
nn
validation$type
compute(nn, validation$type)$net.result
validation$type
validation$!type
validation[-type]
validation[,-type]
dim(validation)
validation[, -58]
compute(nn, validation[,-58])
sum((compute(nn, traning[,-58])$net.result - traning[,-58]) ^ 2) / nrow(traning[,-58])
compute(nn, validation[,-58])
(compute(nn, validation[,-58])$net.result
)
(compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2)
(compute(nn, validation[,-58])$net.result - validation[,-58])
(compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2
nrow(validation[,-58]
)
nrow(validation)
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2) / nrow(validation[,-58])
sum((compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2) / nrow(validation[,-58])
sum((compute(nn, traning[,-58])$net.result - traning[,-58]) ^ 2) / nrow(traning[,-58])
names(traning)
train = new_email_data[id, ]
names(traning)
names(traning)
traning
sum((compute(nn, train[,-58])$net.result - train[,-58]) ^ 2) / nrow(train[,-58])
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  c(1), threshold = threshold )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2) / nrow(validation[,-58])
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,-58]) ^ 2) / nrow(train[,-58])
}
nn <- neuralnet(formula = eq, data = train, hidden =  c(1), threshold = threshold )
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  3, threshold = threshold )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2) / nrow(validation[,-58])
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,-58]) ^ 2) / nrow(train[,-58])
}
sum((compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2) / nrow(validation[,-58]
)
sum((compute(nn, train[,-58])$net.result - train[,-58]) ^ 2) / nrow(train[,-58])
nn <- neuralnet(formula = eq, data = train, hidden =  3, threshold = 0.01 )
nn <- neuralnet(formula = eq, data = train[,-58], hidden =  3, threshold = 0.01 )
train[, 58] = as.numeric(train[, 58])
nn <- neuralnet(formula = eq, data = train, hidden =  3, threshold = 0.01 )
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  3, threshold = 0.01 )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,-58]) ^ 2) / nrow(validation[,-58])
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,-58]) ^ 2) / nrow(train[,-58])
}
min_mse = which.min(mse_validation) / 1000
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.001),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
best_threshold = which.min(mse_validation) / 1000
best_nn <- neuralnet(Sin ~ Var, data = trva , hidden = 10, threshold = best_threshold, startweights = winit)
plot(best_nn)
which.min(mse_validation) / 1000
best_threshold =
data.frame(Var, Sin=sin(Var))
trva <- data.frame(Var, Sin=sin(Var))
trva
best_nn <- neuralnet(formula = eq, data = email_data , hidden = 10, threshold = best_threshold)
eq
email_data
best_threshold
best_threshold = which.min(mse_validation) / 1000
best_threshold
best_nn <- neuralnet(formula = eq, data = email_data , hidden = 10, threshold = best_threshold)
best_nn <- neuralnet(formula = eq, data = email_data[,-58] , hidden = 10, threshold = best_threshold)
View(email_data)
View(email_data)
View(new_email_data)
View(new_email_data)
swag = new_email_data
swag[,58] = as.numeric(swag[,58])
best_nn <- neuralnet(formula = eq, data = swag , hidden = 10, threshold = best_threshold)
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.001),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.001),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.001),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
mse_validation
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.01),
ylab = "MSE", col = "red")
plot(mse_validation, type = "o", main = "Mean square error"
)
min_mse
best_nn <- neuralnet(formula = eq, data = swag , hidden = 3, threshold = best_threshold)
best_nn <- neuralnet(formula = eq, data = swag , hidden = 3, threshold = best_threshold)
plot(best_nn)
plot(prediction(best_nn)$rep1, main = "Predicsion of Best Neural Network", col = "green")
prediction(best_nn)$rep1
View(best_nn)
View(best_nn)
pred = prediction(best_nn)
View(pred)
View(pred)
pred$rep1 - pred$data
plot(prediction(best_nn)$rep1$type, main = "Predicsion of Best Neural Network", col = "green")
pred
pred$rep1
pred$rep1[,58]
points(swag, col = "blue")
plot(prediction(best_nn)$rep1[,58], main = "Predicsion of Best Neural Network", col = "green")
points(swag$type, col = "blue")
distance_form_correct = swag$type - pred$rep1[,58]
plot(distance_form_correct)
distance_form_correct = abs(swag$type - pred$rep1[,58])
plot(distance_form_correct)
distance_form_correct
tot = 1
for (i in length(distance_form_correct)) {
tot = tot * distance_form_correct[i]
}
tot = 0
sum(distance_form_correct)
avr_dist = (sum(distance_form_correct)) / length(distance_form_correct)
plot(avr_dist)
library(MASS)
library(neuralnet)
library(kernlab)
set.seed(1234567890)
email_data = spam
data.frame(spam)
data.frame(spam)
data(spam)
set.seed(1234567890)
data(spam)
email_data = spam
str(email_data)
as.logical(levels(factor(c("FALSE", "TRUE"))))
as.logical((factor(c("FALSE", "TRUE"))))
as.logical(((c("FALSE", "TRUE"))))
as.logical(((c("FALSE", "TRUE", "TRUE"))))
(((c("FALSE", "TRUE", "TRUE"))))
hist(as.numeric(as.logical(email_data$type)))
as.logical(email_data$type)
ifelse(email_data$type == factor(spam),yes = email_data$type = TRUE, email_data$type = FALSE)
email_data$type
as.logical(email_data$type)
levels(email_data$type)
levels(factors(email_data$type))
levels(as.numeric(email_data$type))
levels(as.numeric(email_data$type))
(as.numeric(email_data$type))
email_data$type
as.numerical(email_data$type)
as.numeric(email_data$type)
email_data$type
email_data$type = as.numeric(email_data$type)
email_data$type
email_data = ifelse(email_data$type == 2 ,yes = TRUE, no = FALSE)
email_data
email_data$type = as.numeric(email_data$type)
email_type = ifelse(email_data$type == 2 ,yes = TRUE, no = FALSE)
email_data = spam
email_data$type = as.numeric(email_data$type)
email_type = ifelse(email_data$type == 2 ,yes = TRUE, no = FALSE)
email_data$type = email_type
email_data$type
apply(email_data, 2, range)
min_value = as.numeric(apply(email_data, 2, min))
max_value = as.numeric(apply(email_data, 2, max))
new_email_data = as.data.frame(scale(email_data, center = min_value, scale = max_value - min_value))
View(new_email_data)
View(new_email_data)
n = dim(new_email_data)[1]
id = sample(1:n, floor(n * 0.5))
train = new_email_data[id, ]
validation = new_email_data[-id, ]
mse_validation = c()
mse_traning = c()
layer = c(3,10,3)
varibales = colnames(new_email_data[,-58])
varibales
pred_vars = varibales[!varibales%in%"type"]
pred_vars
res = paste(pred_vars, collapse = "+")
res
eq = as.formula(paste("type ~", res, collapse = "+"))
eq
nn <- neuralnet(formula = eq, data = train, hidden =  layer, threshold = 0.01 )
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  layer, threshold = threshold )
mse_validation[i] = sum((compute(nn, validation)$net.result - validation) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train)$net.result - train) ^ 2) / nrow(train)
}
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  10, threshold = threshold )
mse_validation[i] = sum((compute(nn, validation)$net.result - validation) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train)$net.result - train) ^ 2) / nrow(train)
}
nn <- neuralnet(formula = eq, data = train, hidden =  10, threshold = 0.01 )
sum((compute(nn, validation)$net.result - validation) ^ 2) / nrow(validation)
(compute(nn, validation)$net.result
)
compute(nn, validation)
View(validation)
View(validation)
str(validation)
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
validation$eq
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train, hidden =  layer, threshold = threshold )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
}
View(validation)
sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
train[,-58]
View(train)
View(train)
str(train)
compute(nn, train[,-58])
(compute(nn, validation[,-58])
)
mse_validation[i] = sum((compute(nn, validation$Var)$net.result - validation$Sin) ^ 2) / nrow(validation)
sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
1 * TRUE
validation[,-58]
nn
compute(nn, validation[,-58])$net.result
nn$response
start_weight = runif(n = 50, min = -1, max = 1)
start_weight
nn <- neuralnet(formula = eq, data = train,
hidden =  layer, threshold = threshold, startweights = start_weight )
threshold
nn <- neuralnet(formula = eq, data = train,
hidden =  layer, threshold = 0.01, startweights = start_weight )
nn <- neuralnet(formula = eq, data = train,
hidden =  10, threshold = 0.01, startweights = start_weight )
start_weight = runif(n = 21, min = -1, max = 1)
nn <- neuralnet(formula = eq, data = train,
hidden =  3, threshold = 0.01, startweights = start_weight )
start_weight = runif(n = 31, min = -1, max = 1)
nn <- neuralnet(formula = eq, data = train,
hidden =  3, threshold = 0.01, startweights = start_weight )
nn
rm(nn)
start_weight = runif(n = 51, min = -1, max = 1)
nn <- neuralnet(formula = eq, data = train,
hidden =  3, threshold = 0.01, startweights = start_weight )
start_weight = runif(n = 100, min = -1, max = 1)
nn
compute(nn, validation[,-58])
compute(nn, validation[,-58])$net.result
sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2)
/ nrow(validation)
sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
start_weight = runif(n = 100, min = -1, max = 1)
for (i in 1:10) {
threshold = (i / 1000)
nn <- neuralnet(formula = eq, data = train,
hidden =  3, threshold = threshold, startweights = start_weight )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
}
for (i in 1:10) {
threshold = (i / 100)
nn <- neuralnet(formula = eq, data = train,
hidden =  3, threshold = threshold, startweights = start_weight )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
}
min_mse = which.min(mse_validation) / 100
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.01),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
mse_traning
mse_validation
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.09),
ylab = "MSE", col = "red")
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.1),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.2),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
best_threshold = which.min(mse_validation) / 100
best_nn <- neuralnet(formula = eq, data = swag , hidden = 3, threshold = best_threshold)
plot(best_nn)
best_threshold = which.min(mse_validation) / 100
best_nn <- neuralnet(formula = eq, data = swag , hidden = 3, threshold = best_threshold)
best_threshold = which.min(mse_validation) / 100
best_nn <- neuralnet(formula = eq, data = new_email_data , hidden = 3, threshold = best_threshold)
plot(best_nn)
plot(prediction(best_nn)$rep1[,58], main = "Predicsion of Best Neural Network", col = "green")
points(swag$type, col = "blue")
points(new_email_data$type, col = "blue")
plot(prediction(best_nn)$rep1, main = "Predicsion of Best Neural Network", col = "green")
points(new_email_data$type, col = "blue")
plot(prediction(best_nn)$rep1[,58],prediction(best_nn)$rep1[,-58] , main = "Predicsion of Best Neural Network", col = "green")
min_mse
mse_validation
which.min(mse_validation)
pred = compute(best_nn, validation[,-58])
pred$net.result
plot(pred$net.result, validation$type)
plot(pred$net.result)
points(validation$type, col = "red")
plot(abs(pred$net.result))
points(validation$type, col = "red")
plot(abs(pred$net.result), validation$type)
plot(abs(pred$net.result)
points(validation$type, col = "red")
plot(abs(pred$net.result))
points(validation$type, col = "red")
MSE = sum((pred$net.result - validation$type)^2) / nrow(validation)
MSE
for (i in 1:10) {
threshold = (i / 100)
nn <- neuralnet(formula = eq, data = train,
hidden =  5, threshold = threshold, startweights = start_weight )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
}
min_mse = which.min(mse_validation) / 100
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.2),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
best_threshold = which.min(mse_validation) / 100
best_threshold = which.min(mse_validation) / 100
best_nn <- neuralnet(formula = eq, data = new_email_data , hidden = 5, threshold = best_threshold)
plot(best_nn)
plot(prediction(best_nn)$rep1[,58],prediction(best_nn)$rep1[,-58] , main = "Predicsion of Best Neural Network", col = "green")
points(new_email_data$type, col = "blue")
pred = compute(best_nn, validation[,-58])
pred$net.result
plot(abs(pred$net.result), col = "blue")
points(validation$type, col = "red")
MSE = sum((pred$net.result - validation$type)^2) / nrow(validation)
# Matix
misclassification_rate_matrix <- function(data, prediction) {
t = table(data$good_bad, prediction)
print(t)
mcr = (1 - (sum(diag(t) / sum(t))))
return (mcr)
}
# Matix
misclassification_rate_matrix <- function(data, prediction) {
t = table(data$type, prediction)
print(t)
mcr = (1 - (sum(diag(t) / sum(t))))
return (mcr)
}
misclassification_rate_matrix(new_email_data, pred)
pred
new_email_data
length(new_email_data$type)
misclassification_rate_matrix(test, pred)
length(new_email_data$type)
length(validation$type)
length(pred)
length(t(pred))
pred
View(pred)
misclassification_rate_matrix(test, pred$net.result)
misclassification_rate_matrix(validation, pred$net.result)
mcrm = misclassification_rate_matrix(validation, pred$net.result)
mcrm
t = table(validation, pred$net.result)
t = table(validation$type, pred$net.result)
t
print(t)
summary(t)
t$type
plot(abs(pred$net.result), col = "blue", ylab = "Spam or not Spam")
points(validation$type, col = "red")
plot(prediction(best_nn)$rep1[,58],prediction(best_nn)$rep1[,-58] , main = "Predicsion of Best Neural Network", col = "green")
points(new_email_data$type, col = "blue")
plot(best_nn)
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.2),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
hist(as.numeric(as.logical(email_data$type)
)
)
hist(as.numeric(as.logical(email_data$type)), col = "blue")
hist(as.numeric(as.logical(email_data$type)), col = "blue", xlab = "Spam or not spam")
str(email_data)
length(t)
t
pred$net.result
validation$type
pred_truncked = round(pred)
pred_truncked = round(pred$net.result)
pred_truncked
mcrm = misclassification_rate_matrix(validation, pred_truncked)
help(spam)
# Random initialization of the weights in the interval [-1, 1]
start_weight = runif(n = 1000, min = -1, max = 1)
for (i in 1:10) {
threshold = (i / 100)
nn <- neuralnet(formula = eq, data = train,
hidden =  10, threshold = threshold, startweights = start_weight )
mse_validation[i] = sum((compute(nn, validation[,-58])$net.result - validation[,58]) ^ 2) / nrow(validation)
mse_traning[i] = sum((compute(nn, train[,-58])$net.result - train[,58]) ^ 2) / nrow(train)
}
MSE = sum((pred$net.result - validation$type)^2) / nrow(validation)
min_mse = which.min(mse_validation) / 100
plot(mse_validation, type = "o", main = "Mean square error", xlim = c(0,11), ylim = c(0, 0.2),
ylab = "MSE", col = "red")
points(mse_traning, col = "green", type = "o")
legend(x = "topleft", legend = c("traning", "validation"), col = c("green", "red"), lty = c(1,1))
best_threshold = which.min(mse_validation) / 100
best_nn <- neuralnet(formula = eq, data = new_email_data , hidden = 5, threshold = best_threshold)
best_nn <- neuralnet(formula = eq, data = new_email_data , hidden = 10, threshold = best_threshold)
plot(best_nn)
# Plot of the predictions (green dots) and the data (blue dots)
plot(prediction(best_nn)$rep1[,58],prediction(best_nn)$rep1[,-58] , main = "Predicsion of Best Neural Network", col = "green")
points(new_email_data$type, col = "blue")
prediction(best_nn)$rep1[,58]
prediction(best_nn)$rep1[,-58]
lenght(prediction(best_nn)$rep1[,-58])
plot(prediction(best_nn)$rep1[,58],prediction(best_nn)$rep1[,-58] , main = "Predicsion of Best Neural Network", col = "green")
lenght(prediction(best_nn)$rep1[,58])
lenght(prediction(best_nn)$rep1[,-58])
sum(prediction(best_nn)$rep1[,-58])
plot(prediction(best_nn)$rep1, main = "Predicsion of Best Neural Network", col = "green")
plot(prediction(best_nn)$rep1[,58]
)
plot(prediction(best_nn)$rep1[,-58])
points(new_email_data$type, col = "blue")
plot(prediction(best_nn)$rep1[,58]
plot(prediction(best_nn)$rep1[,58])
points(new_email_data$type, col = "blue")
plot(prediction(best_nn)$rep1[,58]
)
points(new_email_data$type, col = "blue")
plot(prediction(best_nn)$rep1[,58])
pred = compute(best_nn, validation[,-58])
pred$net.result
plot(abs(pred$net.result), col = "blue", ylab = "Spam or not Spam")
points(validation$type, col = "red")
MSE = sum((pred$net.result - validation$type)^2) / nrow(validation)
mcrm = misclassification_rate_matrix(validation, pred_truncked)
pred_truncked = round(pred$net.result)
mcrm = misclassification_rate_matrix(validation, pred_truncked)
plot(best_nn)
hist(as.numeric(as.logical(email_data$type)), col = "blue", xlab = "Spam or not spam")
hist(as.numeric(as.logical(email_data$type)), col = "blue", xlab = "Spam or not spam")
str(email_data)
email_data$type
